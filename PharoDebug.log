THERE_BE_DRAGONS_HERE
Error: first-name does not name an attribute.
19 April 2014 8:35:12 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParser>>ontology:isAttribute:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aSource: 	'first-name]'
		parser: 	a HumParser
		result: 	'first-name'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | aName := self ontology: anOntology isAttribute: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'first-name]'
		syntaxThing: 	[:s | aName := self ontology: anOntology isAttribute: s]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'first-name]'
		anArrayOfSyntaxThings: 	an Array([:s | aName := self ontology: anOntology isAttr...etc...
		empty: 	''
		result: 	nil
		nextSource: 	nil
		nextArray: 	nil
		syntaxThing: 	[:s | aName := self ontology: anOntology isAttribute: s]
		calc: 	nil
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[first-name]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | aName := self ontology: anOntology is...etc...
		empty: 	''
		result: 	'['
		nextSource: 	'first-name]'
		nextArray: 	an Array([:s | aName := self ontology: anOntology isAttribute: s] ']...etc...
		syntaxThing: 	'['
		calc: 	a HumCalculator
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[first-name]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | aName := self ontology: anOntology is...etc...
		productionBlock: 	[:z | 
| data |
data := aBlackBoard getEntityName: v attribute...etc...
		result: 	nil
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z | 
			| data |
			data := aBlackBoard getEntityName: v attribute: aName.
			self push: '<input type="text" name="' , aName , '" value="' , data , '"/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[first-name]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce:...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z ...etc...
		empty: 	'[first-name]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	7
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[first-name]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[first-name]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'Profile: [first-name]'
		syntaxThing: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comme...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}]
		empty: 	'Profile: [first-name]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	3
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'Profile: [first-name]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {headingPrefi...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'Profile: [first-name]'
		syntaxThing: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		parser: 	HumMarkupLine( Profile: [first-name] )

		syntax: 	a HumParser
		frameLine: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		s: 	'Profile: [first-name]'
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation and a Hum run-time...etc...
	Arguments and temporary variables: 
		aBlock: 	[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(nil nil HumMarkupLine( Produced from ~Hum Markup~ notation and ...etc...
		firstIndex: 	3
		lastIndex: 	5


HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aBlackBoard: 	a HumBlackBoard
		aViewName: 	' User'
		parser: 	a HumParser
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		frame: 	HumFrame4View( View: User. )

		lines: 	an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation ...etc...
		code: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array('[pane:' [:s | self
		ontology: anOntology
		is...etc...
		productionBlock: 	[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
...etc...
		result: 	'[pane: User]'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		prod...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: ...etc...
		empty: 	'[pane: User]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false



--- The full stack ---
HumParser>>ontology:isAttribute:
[:s | aName := self ontology: anOntology isAttribute: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParser>>match:sequence:
HumParser>>match:sequence:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z | 
			| data |
			data := aBlackBoard getEntityName: v attribute: aName.
			self push: '<input type="text" name="' , aName , '" value="' , data , '"/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
OrderedCollection>>do:
HumParser>>ontology:blackBoard:produceView:
[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParserTests>>test720textareaWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation and a Hum run-time black board.
<br/>&nbsp; 
<br/>&nbsp; Profile: <input type="text" name="profile" value="Now is the time
	for all good men
	to come
	to the aid
	of their country.
	The quick brown fox jumps over the lazy dog."/></div>}
19 April 2014 8:35:46 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParserTests(TestCase)>>assert:description:
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aString: 	'code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> n...etc...
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests>>test720textareaWidgetWithBlackboardData
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		parser: 	a HumParser
		result: 	'[pane: User]'
		ontology: 	a HumOntology
		frameUpdater: 	a HumFrameUpdater
		code: 	'<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation a...etc...
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		blackBoard: 	a HumBlackBoard
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests(TestCase)>>performTest
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumParserTests>>#test720textareaWidgetWithBlackboardData)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil HumParserTests>>#test720textareaWidgetWithBlackboardDat...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	55
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		event: 	[883@449 mouseUp 266213 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		evt: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [883@449 mouseUp 266213 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		timeStamp: 	266213
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	883@449
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		aMorph: 	a PluggableListMorph(341049344)
		localEvt: 	[883@449 mouseUp 266213 nil]
		index: 	2
		child: 	a TransformMorph(867172352)
		morphs: 	an Array(a TransformMorph(867172352))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		aMorph: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	883@449 corner: 899@465
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	883@449 corner: 899@465
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1011613696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[883@449 mouseUp 266213 nil]
		targetOffset: 	24@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 266213 883 449 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(395575296) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[883@449 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(395575296) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	883@449 corner: 899@465
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	883@449 corner: 899@465
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1011613696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[883@449 mouseUp 266213 nil]
		targetOffset: 	24@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 266213 883 449 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	883@449 corner: 899@465
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	883@449 corner: 899@465
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1011613696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[883@449 mouseUp 266213 nil]
		targetOffset: 	24@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 266213 883 449 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	883@449 corner: 899@465
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	883@449 corner: 899@465
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1011613696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[883@449 mouseUp 266213 nil]
		targetOffset: 	24@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 266213 883 449 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		evt: 	[883@449 mouseUp 266213 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	883@449 corner: 899@465
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	883@449 corner: 899@465
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1011613696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[883@449 mouseUp 266213 nil]
		targetOffset: 	24@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 266213 883 449 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[883@449 mouseUp 266213 nil]
		evtBuf: 	#(1 266213 883 449 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	883@449 corner: 899@465
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	883@449 corner: 899@465
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1011613696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[883@449 mouseUp 266213 nil]
		targetOffset: 	24@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 266213 883 449 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@878
		canvas: 	a FormCanvas on: DisplayScreen(1440x878x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(395575296))(a PreDebu...etc...
		lastStepTime: 	266208
		lastStepMessage: 	nil
		lastCycleTime: 	266248
		alarms: 	a Heap()
		lastAlarmTime: 	266208
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
HumParserTests(TestCase)>>assert:description:
HumParserTests>>test720textareaWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation and a Hum run-time black board.
<br/>&nbsp; 
<br/>&nbsp; Profile: <textarea rows="9" name="Profile: "></textarea></div>}
19 April 2014 8:36:31 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParserTests(TestCase)>>assert:description:
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aString: 	'code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> n...etc...
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests>>test720textareaWidgetWithBlackboardData
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		parser: 	a HumParser
		result: 	'[pane: User]'
		ontology: 	a HumOntology
		frameUpdater: 	a HumFrameUpdater
		code: 	'<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation a...etc...
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		blackBoard: 	a HumBlackBoard
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests(TestCase)>>performTest
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumParserTests>>#test720textareaWidgetWithBlackboardData)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil HumParserTests>>#test720textareaWidgetWithBlackboardDat...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	55
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392544
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		event: 	[883@449 mouseUp 266213 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		evt: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [883@449 mouseUp 266213 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		timeStamp: 	266213
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	883@449
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		aMorph: 	a PluggableListMorph(341049344)
		localEvt: 	[883@449 mouseUp 266213 nil]
		index: 	2
		child: 	a TransformMorph(867172352)
		morphs: 	an Array(a TransformMorph(867172352))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		aMorph: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	127@250 corner: 143@266
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188743680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[127@250 mouseUp 311895 nil]
		targetOffset: 	121@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 311895 127 250 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(346292224) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[883@449 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(346292224) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	127@250 corner: 143@266
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188743680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[127@250 mouseUp 311895 nil]
		targetOffset: 	121@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 311895 127 250 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	127@250 corner: 143@266
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188743680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[127@250 mouseUp 311895 nil]
		targetOffset: 	121@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 311895 127 250 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
	Receiver's instance variables: 
		bounds: 	127@250 corner: 143@266
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188743680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[127@250 mouseUp 311895 nil]
		targetOffset: 	121@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 311895 127 250 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[883@449 mouseUp 266213 nil]
		evt: 	[883@449 mouseUp 266213 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	127@250 corner: 143@266
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188743680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[127@250 mouseUp 311895 nil]
		targetOffset: 	121@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 311895 127 250 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[883@449 mouseUp 266213 nil]
		evtBuf: 	#(1 266213 883 449 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	127@250 corner: 143@266
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188743680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[127@250 mouseUp 311895 nil]
		targetOffset: 	121@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 311895 127 250 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@878
		canvas: 	a FormCanvas on: DisplayScreen(1440x878x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForEditView(907804672...etc...
		lastStepTime: 	311886
		lastStepMessage: 	nil
		lastCycleTime: 	311927
		alarms: 	a Heap()
		lastAlarmTime: 	311886
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
HumParserTests(TestCase)>>assert:description:
HumParserTests>>test720textareaWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation and a Hum run-time black board.
<br/>&nbsp; 
<br/>&nbsp; Profile: <textarea rows="9" name="Profile: "></textarea></div>}
19 April 2014 8:36:37 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParserTests(TestCase)>>assert:description:
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aString: 	'code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> n...etc...
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests>>test720textareaWidgetWithBlackboardData
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		parser: 	a HumParser
		result: 	'[pane: User]'
		ontology: 	a HumOntology
		frameUpdater: 	a HumFrameUpdater
		code: 	'<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation a...etc...
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		blackBoard: 	a HumBlackBoard
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests(TestCase)>>performTest
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392595
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumParserTests>>#test720textareaWidgetWithBlackboardData)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil HumParserTests>>#test720textareaWidgetWithBlackboardDat...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392595
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	55
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392595
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392595
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392595
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392595
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		event: 	[919@454 mouseUp 317754 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		evt: 	[919@454 mouseUp 317754 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [919@454 mouseUp 317754 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		timeStamp: 	317754
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	919@454
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
		aMorph: 	a PluggableListMorph(341049344)
		localEvt: 	[919@454 mouseUp 317754 nil]
		index: 	2
		child: 	a TransformMorph(867172352)
		morphs: 	an Array(a TransformMorph(867172352))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
		aMorph: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	919@454 corner: 935@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	919@454 corner: 935@470
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(961019904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[919@454 mouseUp 317754 nil]
		targetOffset: 	60@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 317754 919 454 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(943456256) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[919@454 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(943456256) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	919@454 corner: 935@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	919@454 corner: 935@470
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(961019904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[919@454 mouseUp 317754 nil]
		targetOffset: 	60@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 317754 919 454 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	919@454 corner: 935@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	919@454 corner: 935@470
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(961019904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[919@454 mouseUp 317754 nil]
		targetOffset: 	60@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 317754 919 454 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
	Receiver's instance variables: 
		bounds: 	919@454 corner: 935@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	919@454 corner: 935@470
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(961019904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[919@454 mouseUp 317754 nil]
		targetOffset: 	60@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 317754 919 454 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[919@454 mouseUp 317754 nil]
		evt: 	[919@454 mouseUp 317754 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	919@454 corner: 935@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	919@454 corner: 935@470
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(961019904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[919@454 mouseUp 317754 nil]
		targetOffset: 	60@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 317754 919 454 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[919@454 mouseUp 317754 nil]
		evtBuf: 	#(1 317754 919 454 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	919@454 corner: 935@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	919@454 corner: 935@470
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(961019904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[919@454 mouseUp 317754 nil]
		targetOffset: 	60@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 317754 919 454 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@878
		canvas: 	a FormCanvas on: DisplayScreen(1440x878x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(943456256))(a PreDebu...etc...
		lastStepTime: 	317745
		lastStepMessage: 	nil
		lastCycleTime: 	317799
		alarms: 	a Heap()
		lastAlarmTime: 	317745
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
HumParserTests(TestCase)>>assert:description:
HumParserTests>>test720textareaWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation and a Hum run-time black board.
<br/>&nbsp; 
<br/>&nbsp; Profile: <textarea rows="9" name="Profile: ">Now is the time
	for all good men
	to come
	to the aid
	of their country.
	The quick brown fox jumps over the lazy dog.</textarea></div>}
19 April 2014 8:38:19 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParserTests(TestCase)>>assert:description:
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aString: 	'code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> n...etc...
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests>>test720textareaWidgetWithBlackboardData
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		parser: 	a HumParser
		result: 	'[pane: User]'
		ontology: 	a HumOntology
		frameUpdater: 	a HumFrameUpdater
		code: 	'<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation a...etc...
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		blackBoard: 	a HumBlackBoard
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests(TestCase)>>performTest
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumParserTests>>#test720textareaWidgetWithBlackboardData)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil HumParserTests>>#test720textareaWidgetWithBlackboardDat...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	55
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		event: 	[881@448 mouseUp 420108 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		evt: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [881@448 mouseUp 420108 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		timeStamp: 	420108
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	881@448
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		aMorph: 	a PluggableListMorph(341049344)
		localEvt: 	[881@448 mouseUp 420108 nil]
		index: 	2
		child: 	a TransformMorph(867172352)
		morphs: 	an Array(a TransformMorph(867172352))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		aMorph: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	881@448 corner: 897@464
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	881@448 corner: 897@464
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(163053568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[881@448 mouseUp 420108 nil]
		targetOffset: 	22@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 420108 881 448 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(200278016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[881@448 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(200278016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	881@448 corner: 897@464
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	881@448 corner: 897@464
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(163053568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[881@448 mouseUp 420108 nil]
		targetOffset: 	22@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 420108 881 448 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	881@448 corner: 897@464
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	881@448 corner: 897@464
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(163053568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[881@448 mouseUp 420108 nil]
		targetOffset: 	22@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 420108 881 448 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	881@448 corner: 897@464
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	881@448 corner: 897@464
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(163053568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[881@448 mouseUp 420108 nil]
		targetOffset: 	22@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 420108 881 448 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		evt: 	[881@448 mouseUp 420108 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	881@448 corner: 897@464
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	881@448 corner: 897@464
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(163053568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[881@448 mouseUp 420108 nil]
		targetOffset: 	22@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 420108 881 448 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[881@448 mouseUp 420108 nil]
		evtBuf: 	#(1 420108 881 448 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	881@448 corner: 897@464
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	881@448 corner: 897@464
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(163053568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[881@448 mouseUp 420108 nil]
		targetOffset: 	22@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 420108 881 448 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@878
		canvas: 	a FormCanvas on: DisplayScreen(1440x878x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(200278016))(a PreDebu...etc...
		lastStepTime: 	420113
		lastStepMessage: 	nil
		lastCycleTime: 	420154
		alarms: 	a Heap()
		lastAlarmTime: 	420113
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
HumParserTests(TestCase)>>assert:description:
HumParserTests>>test720textareaWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation and a Hum run-time black board.
<br/>&nbsp; 
<br/>&nbsp; Profile: <textarea rows="9" name="Profile: ">Now is the time
	for all good men
	to come
	to the aid
	of their country.
	The quick brown fox jumps over the lazy dog.</textarea></div>}
19 April 2014 8:39:10 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParserTests(TestCase)>>assert:description:
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aString: 	'code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> n...etc...
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests>>test720textareaWidgetWithBlackboardData
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		parser: 	a HumParser
		result: 	'[pane: User]'
		ontology: 	a HumOntology
		frameUpdater: 	a HumFrameUpdater
		code: 	'<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation a...etc...
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		blackBoard: 	a HumBlackBoard
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests(TestCase)>>performTest
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumParserTests>>#test720textareaWidgetWithBlackboardData)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil HumParserTests>>#test720textareaWidgetWithBlackboardDat...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	55
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575392698
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		event: 	[881@448 mouseUp 420108 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		evt: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [881@448 mouseUp 420108 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		timeStamp: 	420108
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	881@448
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		aMorph: 	a PluggableListMorph(341049344)
		localEvt: 	[881@448 mouseUp 420108 nil]
		index: 	2
		child: 	a TransformMorph(867172352)
		morphs: 	an Array(a TransformMorph(867172352))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		aMorph: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	352@362 corner: 368@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(550764544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@362 mouseUp 470567 nil]
		targetOffset: 	57@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 470567 352 362 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(588513280) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[881@448 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(588513280) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	352@362 corner: 368@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(550764544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@362 mouseUp 470567 nil]
		targetOffset: 	57@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 470567 352 362 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	352@362 corner: 368@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(550764544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@362 mouseUp 470567 nil]
		targetOffset: 	57@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 470567 352 362 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
	Receiver's instance variables: 
		bounds: 	352@362 corner: 368@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(550764544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@362 mouseUp 470567 nil]
		targetOffset: 	57@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 470567 352 362 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[881@448 mouseUp 420108 nil]
		evt: 	[881@448 mouseUp 420108 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	352@362 corner: 368@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(550764544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@362 mouseUp 470567 nil]
		targetOffset: 	57@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 470567 352 362 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[881@448 mouseUp 420108 nil]
		evtBuf: 	#(1 420108 881 448 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	352@362 corner: 368@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(550764544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@362 mouseUp 470567 nil]
		targetOffset: 	57@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 470567 352 362 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@878
		canvas: 	a FormCanvas on: DisplayScreen(1440x878x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForEditView(355205120...etc...
		lastStepTime: 	470545
		lastStepMessage: 	nil
		lastCycleTime: 	470607
		alarms: 	a Heap()
		lastAlarmTime: 	470545
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
HumParserTests(TestCase)>>assert:description:
HumParserTests>>test720textareaWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BlockClosure>>isEmptyOrNil
19 April 2014 8:49:29 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

BlockClosure(Object)>>doesNotUnderstand: #isEmptyOrNil
	Receiver: ['code={' , code inspect , '}']
	Arguments and temporary variables: 
		aMessage: 	isEmptyOrNil
		exception: 	MessageNotUnderstood: BlockClosure>>isEmptyOrNil
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests>>test720textareaWidgetWithBlackboardData
		startpc: 	196
		numArgs: 	0


[:stream | 
| mt |
stream << self class name.
	(mt := self messageText) isEmptyOrNil
		ifFalse: [stream << ': ' << mt]] in TestFailure(Exception)>>description
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		stream: 	a WriteStream 'TestFailure'
		mt: 	['code={' , code inspect , '}']
	Receiver's instance variables: 
		messageText: 	['code={' , code inspect , '}']
		tag: 	nil
		signaler: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		signalContext: 	TestFailure(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


String class(SequenceableCollection class)>>new:streamContents:
	Receiver: String
	Arguments and temporary variables: 
		newSize: 	100
		blockWithArg: 	[:stream | 
| mt |
stream << self class name.
	(mt := self messag...etc...
		stream: 	a WriteStream 'TestFailure'
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 270)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Compiler-Kernel' inviolateInstanceVariableNames isLegalInstVar...etc...
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


String class(SequenceableCollection class)>>streamContents:
	Receiver: String
	Arguments and temporary variables: 
		blockWithArg: 	[:stream | 
| mt |
stream << self class name.
	(mt := self messag...etc...
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 270)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Compiler-Kernel' inviolateInstanceVariableNames isLegalInstVar...etc...
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


TestFailure(Exception)>>description
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	['code={' , code inspect , '}']
		tag: 	nil
		signaler: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		signalContext: 	TestFailure(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


TestFailure>>defaultAction
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	['code={' , code inspect , '}']
		tag: 	nil
		signaler: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		signalContext: 	TestFailure(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(137625600)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


TestFailure(Exception)>>signal
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	['code={' , code inspect , '}']
		tag: 	nil
		signaler: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		signalContext: 	TestFailure(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


TestFailure(Exception)>>signal:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		signalerText: 	['code={' , code inspect , '}']
	Receiver's instance variables: 
		messageText: 	['code={' , code inspect , '}']
		tag: 	nil
		signaler: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		signalContext: 	TestFailure(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


TestFailure class(Exception class)>>signal:
	Receiver: TestFailure
	Arguments and temporary variables: 
		signalerText: 	['code={' , code inspect , '}']
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(TestFailure>>#defaultAction "a ...etc...
		format: 	142
		instanceVariables: 	nil
		organization: 	('Camp Smalltalk' sunitAnnounce:toResult:)
('camp smalltalk' defa...etc...
		subclasses: 	{ResumableTestFailure}
		name: 	#TestFailure
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'SUnit-Core-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


HumParserTests(TestCase)>>assert:description:
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aString: 	['code={' , code inspect , '}']
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests>>test720textareaWidgetWithBlackboardData
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 
		parser: 	a HumParser
		result: 	'[pane: User]'
		ontology: 	a HumOntology
		frameUpdater: 	a HumFrameUpdater
		code: 	'<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation a...etc...
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		blackBoard: 	a HumBlackBoard
	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


HumParserTests(TestCase)>>performTest
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test720textareaWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test720textareaWidgetWithBlackboardData


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393366
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumParserTests>>#test720textareaWidgetWithBlackboardData)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil HumParserTests>>#test720textareaWidgetWithBlackboardDat...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393366
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	55
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393366
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393366
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393366
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test720textareaWidgetWithBlackboardData)
		failedSelected: 	HumParserTests>>#test720textareaWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393366
		result: 	64 run, 63 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		event: 	[1097@452 mouseUp 1089847 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		evt: 	[1097@452 mouseUp 1089847 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[1097@452 mouseUp 1089847 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [1097@452 mouseUp 1089847 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		timeStamp: 	1089847
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1097@452
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[1097@452 mouseUp 1089847 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[1097@452 mouseUp 1089847 nil]
		aMorph: 	a PluggableListMorph(341049344)
		localEvt: 	[1097@452 mouseUp 1089847 nil]
		index: 	2
		child: 	a TransformMorph(867172352)
		morphs: 	an Array(a TransformMorph(867172352))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[1097@452 mouseUp 1089847 nil]
		aMorph: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[1097@452 mouseUp 1089847 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[1097@452 mouseUp 1089847 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[1097@452 mouseUp 1089847 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test720textareaWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #isEmptyOrNil
[:stream | 
| mt |
stream << self class name.
	(mt := self messageText) isEmptyOrNil
		ifFalse: [stream << ': ' << mt]] in TestFailure(Exception)>>description
String class(SequenceableCollection class)>>new:streamContents:
String class(SequenceableCollection class)>>streamContents:
TestFailure(Exception)>>description
TestFailure>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
TestFailure(Exception)>>signal
TestFailure(Exception)>>signal:
TestFailure class(Exception class)>>signal:
HumParserTests(TestCase)>>assert:description:
HumParserTests>>test720textareaWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: user does not name an attribute.
19 April 2014 8:53:16 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParser>>ontology:isAttribute:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aSource: 	'user email]'
		parser: 	a HumParser
		result: 	'user'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | aName := self ontology: anOntology isAttribute: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'user email]'
		syntaxThing: 	[:s | aName := self ontology: anOntology isAttribute: s]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'user email]'
		anArrayOfSyntaxThings: 	an Array([:s | aName := self ontology: anOntology isAttr...etc...
		empty: 	''
		result: 	nil
		nextSource: 	nil
		nextArray: 	nil
		syntaxThing: 	[:s | aName := self ontology: anOntology isAttribute: s]
		calc: 	nil
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[user email]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | aName := self ontology: anOntology is...etc...
		empty: 	''
		result: 	'['
		nextSource: 	'user email]'
		nextArray: 	an Array([:s | aName := self ontology: anOntology isAttribute: s] ']...etc...
		syntaxThing: 	'['
		calc: 	a HumCalculator
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[user email]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | aName := self ontology: anOntology is...etc...
		productionBlock: 	[:z | 
| data |
data := aBlackBoard getEntityName: v attribute...etc...
		result: 	nil
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z | 
			| data |
			data := aBlackBoard getEntityName: v attribute: aName.
			self push: '<input type="text" name="' , aName , '" value="' , data , '"/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[user email]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce:...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z ...etc...
		empty: 	'[user email]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	7
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[user email]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[user email]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'User EMail [user email]'
		syntaxThing: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comme...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}]
		empty: 	'User EMail [user email]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	3
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'User EMail [user email]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {headingPrefi...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'User EMail [user email]'
		syntaxThing: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		parser: 	HumMarkupLine( User EMail [user email] )

		syntax: 	a HumParser
		frameLine: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		s: 	'User EMail [user email]'
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation and a Hum run-time...etc...
	Arguments and temporary variables: 
		aBlock: 	[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(nil nil HumMarkupLine( Produced from ~Hum Markup~ notation and ...etc...
		firstIndex: 	3
		lastIndex: 	5


HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aBlackBoard: 	a HumBlackBoard
		aViewName: 	' User'
		parser: 	a HumParser
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		frame: 	HumFrame4View( View: User. )

		lines: 	an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation ...etc...
		code: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array('[pane:' [:s | self
		ontology: anOntology
		is...etc...
		productionBlock: 	[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
...etc...
		result: 	'[pane: User]'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		prod...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: ...etc...
		empty: 	'[pane: User]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false



--- The full stack ---
HumParser>>ontology:isAttribute:
[:s | aName := self ontology: anOntology isAttribute: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParser>>match:sequence:
HumParser>>match:sequence:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z | 
			| data |
			data := aBlackBoard getEntityName: v attribute: aName.
			self push: '<input type="text" name="' , aName , '" value="' , data , '"/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
OrderedCollection>>do:
HumParser>>ontology:blackBoard:produceView:
[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParserTests>>test730attributeWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: user does not name an attribute.
19 April 2014 8:54:16 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParser>>ontology:isAttribute:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aSource: 	'user email]'
		parser: 	a HumParser
		result: 	'user'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | aName := self ontology: anOntology isAttribute: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'user email]'
		syntaxThing: 	[:s | aName := self ontology: anOntology isAttribute: s]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'user email]'
		anArrayOfSyntaxThings: 	an Array([:s | aName := self ontology: anOntology isAttr...etc...
		empty: 	''
		result: 	nil
		nextSource: 	nil
		nextArray: 	nil
		syntaxThing: 	[:s | aName := self ontology: anOntology isAttribute: s]
		calc: 	nil
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[user email]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | aName := self ontology: anOntology is...etc...
		empty: 	''
		result: 	'['
		nextSource: 	'user email]'
		nextArray: 	an Array([:s | aName := self ontology: anOntology isAttribute: s] ']...etc...
		syntaxThing: 	'['
		calc: 	a HumCalculator
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[user email]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | aName := self ontology: anOntology is...etc...
		productionBlock: 	[:z | 
| data |
data := aBlackBoard getEntityName: v attribute...etc...
		result: 	nil
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z | 
			| data |
			data := aBlackBoard getEntityName: v attribute: aName.
			self push: '<input type="text" name="' , aName , '" value="' , data , '"/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[user email]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce:...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z ...etc...
		empty: 	'[user email]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	7
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[user email]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[user email]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'User EMail: [user email]'
		syntaxThing: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comme...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}]
		empty: 	'User EMail: [user email]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	3
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'User EMail: [user email]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {headingPrefi...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'User EMail: [user email]'
		syntaxThing: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		parser: 	HumMarkupLine( User EMail: [user email] )

		syntax: 	a HumParser
		frameLine: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		s: 	'User EMail: [user email]'
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation and a Hum run-time...etc...
	Arguments and temporary variables: 
		aBlock: 	[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(nil nil HumMarkupLine( Produced from ~Hum Markup~ notation and ...etc...
		firstIndex: 	3
		lastIndex: 	5


HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aBlackBoard: 	a HumBlackBoard
		aViewName: 	' User'
		parser: 	a HumParser
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		frame: 	HumFrame4View( View: User. )

		lines: 	an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation ...etc...
		code: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array('[pane:' [:s | self
		ontology: anOntology
		is...etc...
		productionBlock: 	[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
...etc...
		result: 	'[pane: User]'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		prod...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: ...etc...
		empty: 	'[pane: User]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false



--- The full stack ---
HumParser>>ontology:isAttribute:
[:s | aName := self ontology: anOntology isAttribute: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParser>>match:sequence:
HumParser>>match:sequence:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z | 
			| data |
			data := aBlackBoard getEntityName: v attribute: aName.
			self push: '<input type="text" name="' , aName , '" value="' , data , '"/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
OrderedCollection>>do:
HumParser>>ontology:blackBoard:produceView:
[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParserTests>>test730attributeWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: first-name does not name an entity.
19 April 2014 8:57:43 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParser>>ontology:isEntity:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aSource: 	'first-name]'
		parser: 	a HumParser
		result: 	'first-name'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | eName := self ontology: anOntology isEntity: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'first-name]'
		syntaxThing: 	[:s | eName := self ontology: anOntology isEntity: s]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'first-name]'
		anArrayOfSyntaxThings: 	an Array([:s | eName := self ontology: anOntology isEnti...etc...
		empty: 	''
		result: 	nil
		nextSource: 	nil
		nextArray: 	nil
		syntaxThing: 	[:s | eName := self ontology: anOntology isEntity: s]
		calc: 	nil
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[first-name]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | eName := self ontology: anOntology is...etc...
		empty: 	''
		result: 	'['
		nextSource: 	'first-name]'
		nextArray: 	an Array([:s | eName := self ontology: anOntology isEntity: s] [:s |...etc...
		syntaxThing: 	'['
		calc: 	a HumCalculator
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[first-name]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | eName := self ontology: anOntology is...etc...
		productionBlock: 	[:z | self push: '<input type="text" name="' , eName , ':' , a...etc...
		result: 	nil
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'['. entity. blank. attribute. ']'}
		produce: [:z | self push: '<input type="text" name="' , eName , ':' , aName , '" value=""/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[first-name]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'['. entity. blank. attribute. ...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'['. entity. blank. attribute. ']'}
...etc...
		empty: 	'[first-name]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	8
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[first-name]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. textAreaWidget. entityAttributeWidget. attributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[first-name]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'First Name: [first-name]'
		syntaxThing: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comme...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}]
		empty: 	'First Name: [first-name]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	3
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'First Name: [first-name]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {headingPrefi...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'First Name: [first-name]'
		syntaxThing: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		parser: 	HumMarkupLine( First Name: [first-name] )

		syntax: 	a HumParser
		frameLine: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		s: 	'First Name: [first-name]'
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation and a Hum run-time...etc...
	Arguments and temporary variables: 
		aBlock: 	[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(nil nil HumMarkupLine( Produced from ~Hum Markup~ notation and ...etc...
		firstIndex: 	3
		lastIndex: 	6


HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aBlackBoard: 	a HumBlackBoard
		aViewName: 	' User'
		parser: 	a HumParser
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		frame: 	HumFrame4View( View: User. )

		lines: 	an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation ...etc...
		code: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array('[pane:' [:s | self
		ontology: anOntology
		is...etc...
		productionBlock: 	[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
...etc...
		result: 	'[pane: User]'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		prod...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: ...etc...
		empty: 	'[pane: User]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. textAreaWidget. entityAttributeWidget. attributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false



--- The full stack ---
HumParser>>ontology:isEntity:
[:s | eName := self ontology: anOntology isEntity: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParser>>match:sequence:
HumParser>>match:sequence:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'['. entity. blank. attribute. ']'}
		produce: [:z | self push: '<input type="text" name="' , eName , ':' , aName , '" value=""/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. textAreaWidget. entityAttributeWidget. attributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
OrderedCollection>>do:
HumParser>>ontology:blackBoard:produceView:
[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. textAreaWidget. entityAttributeWidget. attributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParserTests>>test710attributeWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: user does not name an attribute.
19 April 2014 8:58:25 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParser>>ontology:isAttribute:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aSource: 	'user email]'
		parser: 	a HumParser
		result: 	'user'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | aName := self ontology: anOntology isAttribute: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'user email]'
		syntaxThing: 	[:s | aName := self ontology: anOntology isAttribute: s]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'user email]'
		anArrayOfSyntaxThings: 	an Array([:s | aName := self ontology: anOntology isAttr...etc...
		empty: 	''
		result: 	nil
		nextSource: 	nil
		nextArray: 	nil
		syntaxThing: 	[:s | aName := self ontology: anOntology isAttribute: s]
		calc: 	nil
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[user email]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | aName := self ontology: anOntology is...etc...
		empty: 	''
		result: 	'['
		nextSource: 	'user email]'
		nextArray: 	an Array([:s | aName := self ontology: anOntology isAttribute: s] ']...etc...
		syntaxThing: 	'['
		calc: 	a HumCalculator
		nextResult: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[user email]'
		anArrayOfSyntaxThings: 	an Array('[' [:s | aName := self ontology: anOntology is...etc...
		productionBlock: 	[:z | 
| data |
data := aBlackBoard getEntityName: v attribute...etc...
		result: 	nil
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z | 
			| data |
			data := aBlackBoard getEntityName: v attribute: aName.
			self push: '<input type="text" name="' , aName , '" value="' , data , '"/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[user email]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce:...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z ...etc...
		empty: 	'[user email]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	7
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[user email]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[user email]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	4
	Receiver's instance variables: 
an Array([:s | self match: s oneOf: {bold. italic. underline}] [:s | self match: s oneOf: ...etc...

HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'User EMail: [user email]'
		syntaxThing: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comme...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}]
		empty: 	'User EMail: [user email]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	3
		indexLimiT: 	3
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {headingPrefix. text}
		produce: [| n |
			n :=...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'User EMail: [user email]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {headingPrefi...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'User EMail: [user email]'
		syntaxThing: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection('
<br/>&nbsp; ' 'Produced from ' '<i>Hum Markup</i>...etc...
		ignoreNext: 	false


[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		parser: 	HumMarkupLine( User EMail: [user email] )

		syntax: 	a HumParser
		frameLine: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		s: 	'User EMail: [user email]'
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation and a Hum run-time...etc...
	Arguments and temporary variables: 
		aBlock: 	[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(nil nil HumMarkupLine( Produced from ~Hum Markup~ notation and ...etc...
		firstIndex: 	3
		lastIndex: 	5


HumParser>>ontology:blackBoard:produceView:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aHumOntology: 	a HumOntology
		aBlackBoard: 	a HumBlackBoard
		aViewName: 	' User'
		parser: 	a HumParser
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		frame: 	HumFrame4View( View: User. )

		lines: 	an OrderedCollection(HumMarkupLine( Produced from ~Hum Markup~ notation ...etc...
		code: 	nil
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:sequence:produce:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array('[pane:' [:s | self
		ontology: anOntology
		is...etc...
		productionBlock: 	[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
...etc...
		result: 	'[pane: User]'
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		prod...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: ...etc...
		empty: 	'[pane: User]'
		result: 	''
		syntaxThing: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...
	Arguments and temporary variables: 
		aBlock: 	[:syntaxThing | 
result := self match: source with: syntaxThing.
	resul...etc...
		index: 	2
		indexLimiT: 	9
	Receiver's instance variables: 
an Array([:s | self
		match: s
		sequence: {'[page:'. alphanum. ']'}
		produce: [:z | self...etc...

HumParser>>match:oneOf:
	Receiver: a HumParser
	Arguments and temporary variables: 
		source: 	'[pane: User]'
		anArrayOfSyntaxThings: 	an Array([:s | self
		match: s
		sequence: {'[page:'. al...etc...
		empty: 	''
		result: 	#('')
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


HumParser>>match:with:
	Receiver: a HumParser
	Arguments and temporary variables: 
		aString: 	'[pane: User]'
		syntaxThing: 	[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. ch...etc...
		result: 	''
		empty: 	''
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false


[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
	Receiver: a HumParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stack: 	an OrderedCollection()
		ignoreNext: 	false



--- The full stack ---
HumParser>>ontology:isAttribute:
[:s | aName := self ontology: anOntology isAttribute: s] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParser>>match:sequence:
HumParser>>match:sequence:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'['. attribute. ']'}
		produce: [:z | 
			| data |
			data := aBlackBoard getEntityName: v attribute: aName.
			self push: '<input type="text" name="' , aName , '" value="' , data , '"/>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:frameLine | 
| s |
s := frameLine source.
	parser push: String cr , '<br/>&nbsp; '.
	s trimBoth = ''
		ifTrue: [parser push: '']
		ifFalse: [parser match: s with: syntax]] in HumParser>>ontology:blackBoard:produceView:
OrderedCollection>>do:
HumParser>>ontology:blackBoard:produceView:
[:z | self pop: 1;
		 push: '<div name="' , v trimBoth , '">'
			, (self
					ontology: anOntology
					blackBoard: aBlackBoard
					produceView: v) , '</div>'] in [:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:sequence:produce:
[:s | self
		match: s
		sequence: {'[pane:'. viewName. ']'}
		produce: [:z | self pop: 1;
				 push: '<div name="' , v trimBoth , '">'
					, (self
							ontology: anOntology
							blackBoard: aBlackBoard
							produceView: v) , '</div>']] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {pageWidget. paneWidget. linkWidget. checkboxWidget. radioWidget. categoryWidget. attributeWidget. textAreaWidget. entityAttributeWidget}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [nextSource := HumCalculator substringFrom: source after: result.
			nextSource = empty
				ifTrue: [^ result].
			nextResult := self match: nextSource repeat: anArrayOfSyntaxThings.
			result := result , nextResult.
			result size > 99
				ifTrue: [Error signal: 'Result looks too long for current debug mode.'].
			^ result]] in HumParser>>match:repeat:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
HumParser>>match:repeat:
[:s | self match: s repeat: {emphasis. widget. ordinaryText. comment}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
[:syntaxThing | 
result := self match: source with: syntaxThing.
	result = empty
		ifFalse: [^ result]] in HumParser>>match:oneOf:
Array(SequenceableCollection)>>do:
HumParser>>match:oneOf:
[:s | self match: s oneOf: {heading. list. ordinaryLine}] in HumParser>>markupSyntaxWithOntology:blackBoard:
HumParser>>match:with:
HumParserTests>>test730attributeWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation and a Hum run-time black board.
<br/>&nbsp; 
<br/>&nbsp; User EMail: <input type="text" name="user:email" value=""/></div>}
19 April 2014 8:58:51 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParserTests(TestCase)>>assert:description:
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aString: 	'code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> n...etc...
	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


HumParserTests>>test730attributeWidgetWithBlackboardData
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 
		parser: 	a HumParser
		result: 	'[pane: User]'
		ontology: 	a HumOntology
		frameUpdater: 	a HumFrameUpdater
		code: 	'<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation a...etc...
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		blackBoard: 	a HumBlackBoard
	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


HumParserTests(TestCase)>>performTest
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)
		errorSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		lastUpdate: 	3575393904
		result: 	65 run, 64 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumParserTests>>#test730attributeWidgetWithBlackboardData)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil HumParserTests>>#test730attributeWidgetWithBlackboardDa...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)
		errorSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		lastUpdate: 	3575393904
		result: 	65 run, 64 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	55
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)
		errorSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		lastUpdate: 	3575393904
		result: 	65 run, 64 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)
		errorSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		lastUpdate: 	3575393904
		result: 	65 run, 64 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)
		errorSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		lastUpdate: 	3575393904
		result: 	65 run, 64 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)
		errorSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		lastUpdate: 	3575393904
		result: 	65 run, 64 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(713818112)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	859@605 corner: 1435@804
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(155713536))
		fullBounds: 	859@605 corner: 1435@804
		color: 	Color white
		extension: 	a MorphExtension (411566080) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(742916096)
		scroller: 	a TransformMorph(155713536)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(987234304)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1073217536)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(713818112)
	Arguments and temporary variables: 
		event: 	[927@610 mouseUp 1625464 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	859@605 corner: 1435@804
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(155713536))
		fullBounds: 	859@605 corner: 1435@804
		color: 	Color white
		extension: 	a MorphExtension (411566080) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(742916096)
		scroller: 	a TransformMorph(155713536)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(987234304)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1073217536)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(713818112)
	Arguments and temporary variables: 
		evt: 	[927@610 mouseUp 1625464 nil]
	Receiver's instance variables: 
		bounds: 	859@605 corner: 1435@804
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(155713536))
		fullBounds: 	859@605 corner: 1435@804
		color: 	Color white
		extension: 	a MorphExtension (411566080) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(742916096)
		scroller: 	a TransformMorph(155713536)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(987234304)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1073217536)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(713818112)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
	Receiver's instance variables: 
		bounds: 	859@605 corner: 1435@804
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(155713536))
		fullBounds: 	859@605 corner: 1435@804
		color: 	Color white
		extension: 	a MorphExtension (411566080) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(742916096)
		scroller: 	a TransformMorph(155713536)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(987234304)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1073217536)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [927@610 mouseUp 1625464 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(713818112)
	Receiver's instance variables: 
		timeStamp: 	1625464
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	927@610
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(713818112)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
	Receiver's instance variables: 
		bounds: 	859@605 corner: 1435@804
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(155713536))
		fullBounds: 	859@605 corner: 1435@804
		color: 	Color white
		extension: 	a MorphExtension (411566080) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(742916096)
		scroller: 	a TransformMorph(155713536)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(987234304)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1073217536)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
		aMorph: 	a PluggableListMorph(713818112)
		localEvt: 	[927@610 mouseUp 1625464 nil]
		index: 	2
		child: 	a TransformMorph(155713536)
		morphs: 	an Array(a TransformMorph(155713536))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
		aMorph: 	a PluggableListMorph(713818112)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(713818112)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	859@605 corner: 1435@804
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(155713536))
		fullBounds: 	859@605 corner: 1435@804
		color: 	Color white
		extension: 	a MorphExtension (411566080) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(742916096)
		scroller: 	a TransformMorph(155713536)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(987234304)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1073217536)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(713818112)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
	Receiver's instance variables: 
		bounds: 	859@605 corner: 1435@804
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(155713536))
		fullBounds: 	859@605 corner: 1435@804
		color: 	Color white
		extension: 	a MorphExtension (411566080) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(742916096)
		scroller: 	a TransformMorph(155713536)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(987234304)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1073217536)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(713818112)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
	Receiver's instance variables: 
		bounds: 	859@605 corner: 1435@804
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(155713536))
		fullBounds: 	859@605 corner: 1435@804
		color: 	Color white
		extension: 	a MorphExtension (411566080) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(742916096)
		scroller: 	a TransformMorph(155713536)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(987234304)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1073217536)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
		focusHolder: 	a PluggableListMorph(713818112)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	113@248 corner: 129@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(529006592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[113@248 mouseUp 1651800 nil]
		targetOffset: 	107@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1651800 113 248 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(566755328) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[927@610 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(566755328) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
		focusHolder: 	a PluggableListMorph(713818112)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	113@248 corner: 129@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(529006592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[113@248 mouseUp 1651800 nil]
		targetOffset: 	107@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1651800 113 248 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
		focusHolder: 	a PluggableListMorph(713818112)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	113@248 corner: 129@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(529006592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[113@248 mouseUp 1651800 nil]
		targetOffset: 	107@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1651800 113 248 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
	Receiver's instance variables: 
		bounds: 	113@248 corner: 129@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(529006592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[113@248 mouseUp 1651800 nil]
		targetOffset: 	107@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1651800 113 248 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[927@610 mouseUp 1625464 nil]
		evt: 	[927@610 mouseUp 1625464 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	113@248 corner: 129@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(529006592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[113@248 mouseUp 1651800 nil]
		targetOffset: 	107@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1651800 113 248 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[927@610 mouseUp 1625464 nil]
		evtBuf: 	#(1 1625464 927 610 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	113@248 corner: 129@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(529006592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[113@248 mouseUp 1651800 nil]
		targetOffset: 	107@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1651800 113 248 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@878
		canvas: 	a FormCanvas on: DisplayScreen(1440x878x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForEditView(629407744...etc...
		lastStepTime: 	1651785
		lastStepMessage: 	nil
		lastCycleTime: 	1651829
		alarms: 	a Heap()
		lastAlarmTime: 	1651785
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
HumParserTests(TestCase)>>assert:description:
HumParserTests>>test730attributeWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation and a Hum run-time black board.
<br/>&nbsp; 
<br/>&nbsp; User EMail: <input type="text" name="user:email" value=""/></div>}
19 April 2014 8:58:56 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParserTests(TestCase)>>assert:description:
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aString: 	'code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> n...etc...
	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


HumParserTests>>test730attributeWidgetWithBlackboardData
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 
		parser: 	a HumParser
		result: 	'[pane: User]'
		ontology: 	a HumOntology
		frameUpdater: 	a HumFrameUpdater
		code: 	'<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation a...etc...
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		blackBoard: 	a HumBlackBoard
	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


HumParserTests(TestCase)>>performTest
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumParserTests>>#test730attributeWidgetWithBlackboardData)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil HumParserTests>>#test730attributeWidgetWithBlackboardDa...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	55
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		event: 	[939@453 mouseUp 1656781 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		evt: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [939@453 mouseUp 1656781 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		timeStamp: 	1656781
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	939@453
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		aMorph: 	a PluggableListMorph(341049344)
		localEvt: 	[939@453 mouseUp 1656781 nil]
		index: 	2
		child: 	a TransformMorph(867172352)
		morphs: 	an Array(a TransformMorph(867172352))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		aMorph: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	939@453 corner: 955@469
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	939@453 corner: 955@469
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(424411136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[939@453 mouseUp 1656781 nil]
		targetOffset: 	80@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1656781 939 453 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(461897728) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[939@453 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(461897728) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	939@453 corner: 955@469
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	939@453 corner: 955@469
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(424411136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[939@453 mouseUp 1656781 nil]
		targetOffset: 	80@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1656781 939 453 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	939@453 corner: 955@469
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	939@453 corner: 955@469
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(424411136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[939@453 mouseUp 1656781 nil]
		targetOffset: 	80@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1656781 939 453 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	939@453 corner: 955@469
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	939@453 corner: 955@469
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(424411136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[939@453 mouseUp 1656781 nil]
		targetOffset: 	80@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1656781 939 453 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		evt: 	[939@453 mouseUp 1656781 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	939@453 corner: 955@469
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	939@453 corner: 955@469
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(424411136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[939@453 mouseUp 1656781 nil]
		targetOffset: 	80@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1656781 939 453 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[939@453 mouseUp 1656781 nil]
		evtBuf: 	#(1 1656781 939 453 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	939@453 corner: 955@469
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	939@453 corner: 955@469
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(424411136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[939@453 mouseUp 1656781 nil]
		targetOffset: 	80@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1656781 939 453 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@878
		canvas: 	a FormCanvas on: DisplayScreen(1440x878x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(565182464))(an Ove...etc...
		lastStepTime: 	1656766
		lastStepMessage: 	nil
		lastCycleTime: 	1656808
		alarms: 	a Heap()
		lastAlarmTime: 	1656766
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
HumParserTests(TestCase)>>assert:description:
HumParserTests>>test730attributeWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation and a Hum run-time black board.
<br/>&nbsp; 
<br/>&nbsp; User EMail: <input type="text" name="user:email" value=""/></div>}
19 April 2014 9:00:19 pm

VM: Mac OS - intel - 1092 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] 21.0
Image: Pharo1.3 [Latest update: #13302]

HumParserTests(TestCase)>>assert:description:
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aString: 	'code={<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> n...etc...
	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


HumParserTests>>test730attributeWidgetWithBlackboardData
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 
		parser: 	a HumParser
		result: 	'[pane: User]'
		ontology: 	a HumOntology
		frameUpdater: 	a HumFrameUpdater
		code: 	'<div name="User">
<br/>&nbsp; Produced from <i>Hum Markup</i> notation a...etc...
		syntax: 	[:s | self match: s oneOf: {heading. list. ordinaryLine}]
		blackBoard: 	a HumBlackBoard
	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


HumParserTests(TestCase)>>performTest
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


HumParserTests(TestCase)>>runCase
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	HumParserTests(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


HumParserTests(TestCase)>>debug
	Receiver: HumParserTests>>#test730attributeWidgetWithBlackboardData
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test730attributeWidgetWithBlackboardData


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(HumParserTests>>#test730attributeWidgetWithBlackboardData)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil HumParserTests>>#test730attributeWidgetWithBlackboardDa...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	55
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Balloon-Collections-Tests' #'Finder-Tests' #'SUnit-Core-Extensi...etc...
		categoriesSelected: 	a Set(#'Hum-Tests')
		classes: 	{GivenWhenThen. Hum000RefactoringTests. HumByteCodeTests. HumCalculato...etc...
		classIndex: 	7
		classesSelected: 	a Set(HumParserTests)
		failedList: 	an Array(HumParserTests>>#test730attributeWidgetWithBlackboardData)...etc...
		failedSelected: 	HumParserTests>>#test730attributeWidgetWithBlackboardData
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3575393934
		result: 	65 run, 64 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		event: 	[939@453 mouseUp 1656781 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		evt: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [939@453 mouseUp 1656781 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		timeStamp: 	1656781
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	939@453
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		aMorph: 	a PluggableListMorph(341049344)
		localEvt: 	[939@453 mouseUp 1656781 nil]
		index: 	2
		child: 	a TransformMorph(867172352)
		morphs: 	an Array(a TransformMorph(867172352))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		aMorph: 	a PluggableListMorph(341049344)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(341049344)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	859@441 corner: 1435@601
		owner: 	a SystemWindow(709885952)
		submorphs: 	an Array(a TransformMorph(867172352))
		fullBounds: 	859@441 corner: 1435@601
		color: 	Color white
		extension: 	a MorphExtension (270794752) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.923 g: 0.923 b: 0.923)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(370147328)
		scroller: 	a TransformMorph(867172352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(624951296)
		list: 	#('HumParserTests>>#test730attributeWidgetWithBlackboardData')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(710934528)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	112@249 corner: 128@265
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58720256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[112@249 mouseUp 1739993 nil]
		targetOffset: 	106@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1739993 112 249 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(96468992) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[939@453 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@878
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(96468992) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.0 g: 0.649 b: 0.122)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	112@249 corner: 128@265
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58720256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[112@249 mouseUp 1739993 nil]
		targetOffset: 	106@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1739993 112 249 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		focusHolder: 	a PluggableListMorph(341049344)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	112@249 corner: 128@265
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58720256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[112@249 mouseUp 1739993 nil]
		targetOffset: 	106@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1739993 112 249 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
	Receiver's instance variables: 
		bounds: 	112@249 corner: 128@265
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58720256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[112@249 mouseUp 1739993 nil]
		targetOffset: 	106@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1739993 112 249 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[939@453 mouseUp 1656781 nil]
		evt: 	[939@453 mouseUp 1656781 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	112@249 corner: 128@265
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58720256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[112@249 mouseUp 1739993 nil]
		targetOffset: 	106@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1739993 112 249 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[939@453 mouseUp 1656781 nil]
		evtBuf: 	#(1 1656781 939 453 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	112@249 corner: 128@265
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58720256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[112@249 mouseUp 1739993 nil]
		targetOffset: 	106@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1739993 112 249 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@878
		canvas: 	a FormCanvas on: DisplayScreen(1440x878x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForEditView(59506688)...etc...
		lastStepTime: 	1739989
		lastStepMessage: 	nil
		lastCycleTime: 	1740029
		alarms: 	a Heap()
		lastAlarmTime: 	1739989
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
HumParserTests(TestCase)>>assert:description:
HumParserTests>>test730attributeWidgetWithBlackboardData
HumParserTests(TestCase)>>performTest
[self setUp.
	self performTest] in HumParserTests(TestCase)>>runCase
BlockClosure>>ensure:
HumParserTests(TestCase)>>runCase
[(self class selector: testSelector) runCase] in HumParserTests(TestCase)>>debug
BlockClosure>>ensure:
HumParserTests(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

