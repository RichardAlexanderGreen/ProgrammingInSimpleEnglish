Object subclass: #Graph	instanceVariableNames: 'nodes connections'	classVariableNames: ''	poolDictionaries: ''	category: 'M-Graph'!!Graph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 2/20/2013 19:58'!addConnection: anAssociation 	( self connections ) add: anAssociation.! !!Graph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 2/20/2013 19:52'!addNode: anObject 	"Add the given object to the set of nodes"	" Note that each object / node is unique"	( self nodes ) add: anObject.! !!Graph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 2/20/2013 19:48'!connections	^ connections ifNil: [ connections := Set new ].! !!Graph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 2/20/2013 19:46'!nodes	^ nodes ifNil: [ nodes := Set new ].! !TestCase subclass: #GraphTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'M-Graph'!!GraphTests methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 2/20/2013 19:45'!test110GraphHasNodes	"A graph has a collection (set) of nodes"	| graph |	graph := Graph new.	self assert: ( graph nodes isEmpty ).! !!GraphTests methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 2/20/2013 19:47'!test120GraphHasConnections	"A graph has a collection (set) of nodes"	| graph |	graph := Graph new.	self assert: ( graph connections isEmpty ).! !!GraphTests methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 2/20/2013 19:54'!test130PutGetNode	"A graph has a collection (set) of nodes"	| graph node node2 |	graph := Graph new.	self assert: ( graph nodes isEmpty ).		node := 'My content just happens to be a string but I could be any kind of object'.	graph addNode: node.	self assert: ( graph nodes size = 1 ).		graph nodes do: [ :entry | self assert: (entry == node )].! !!GraphTests methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 2/20/2013 19:57'!test140PutGetConnector	"A graph has a collection (set) of nodes"	| graph node node2 |	graph := Graph new.	self assert: ( graph nodes isEmpty ).		node := 'My content just happens to be a string but I could be any kind of object'.	graph addNode: node.	self assert: ( graph nodes size = 1 ).		node2 := 'My content also just happens to be a string but I could be any kind of object'.	graph addNode: node2.	self assert: ( graph nodes size = 2 ).		graph addConnection: ( node -> node2 ).! !