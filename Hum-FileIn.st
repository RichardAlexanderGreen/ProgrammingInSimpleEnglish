Object subclass: #HumFileIn	instanceVariableNames: 'someInstanceVariable'	classVariableNames: ''	poolDictionaries: ''	category: 'Hum-FileIn'!!HumFileIn commentStamp: 'RichardAlexanderGreen 2/25/2013 18:18' prior: 0!This class and its peers provides the means to identify what is needed in a Smalltalk code generator.If the generator writes a ".ST" file, it needs to be compatible with "file-in" function.The classes in this category are here just to see what is generated by file-outand/or to see if generated or modified files can "file-in" correctly.DO NOT CHANGE THE COMMENTS IN THE OTHER CLASSES.!!HumFileIn methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 10/18/2012 19:19'!someMethod: anArgument	"This method provides means to test file in from generated code."	|  |	someInstanceVariable := anArgument.	"Minor Edit"	^someInstanceVariable.	! !!HumFileIn methodsFor: 'rendering' stamp: 'RichardAlexanderGreen 10/18/2012 14:14'!anotherMethod: anArgument2	"This is a second method to check for iteration anomolies."	| localVariable2 |	"Another minor edit."	localVariable2 := anArgument2.	! !HumFileIn subclass: #HumFileInSubclass	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Hum-FileIn'!!HumFileInSubclass commentStamp: 'RichardAlexanderGreen 10/18/2012 14:23' prior: 0!This is class comment for the subclass.!!HumFileInSubclass methodsFor: 'testing' stamp: 'RichardAlexanderGreen 10/18/2012 14:24'!subclassMethod: anArgument3	| localVariable3 |	localVariable3 := anArgument3.	! !Object subclass: #HumFileOut	instanceVariableNames: 'myInstanceVariable'	classVariableNames: ''	poolDictionaries: ''	category: 'Hum-FileIn'!!HumFileOut methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 10/18/2012 19:20'!myInstanceVariable	^ myInstanceVariable.	! !