TestCase subclass: #HumGraphTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Hum-Graph'!!HumGraphTests methodsFor: 'access tests' stamp: 'RichardAlexanderGreen 1/22/2014 17:31'!test130PutGetNode	"A graph has a collection (set) of nodes"	| graph node node2 |	graph := HumGraph new.	self assert: ( graph nodes isEmpty ).		node := 'My content just happens to be a string but I could be any kind of object'.	graph addNode: node.	self assert: ( graph nodes size = 1 ).		graph nodes do: [ :entry | self assert: (entry == node )].! !!HumGraphTests methodsFor: 'access tests' stamp: 'RichardAlexanderGreen 1/22/2014 17:31'!test110GraphHasNodes	"A graph has a collection (set) of nodes"	| graph |	graph := HumGraph new.	self assert: ( graph nodes isEmpty ).! !!HumGraphTests methodsFor: 'access tests' stamp: 'RichardAlexanderGreen 4/17/2015 21:22'!test160DetectCycle	"A graph has a collection (set) of nodes"	| graph nodeA nodeB nodeC |	false ifFalse: [ Transcript cr; show: 'test160DetectCycle is turned off.'. ^self.].	graph := HumGraph new.	self assert: ( graph nodes isEmpty ).		nodeA := 'A'.	graph addNode: nodeA label: 'nodeA'.	nodeB := 'B'.	graph addNode: nodeB label: 'nodeB'.	nodeC := 'C'.	graph addNode: nodeC label: 'nodeC'.	graph addConnection: ( nodeA -> nodeB ) label: 'A to B'.	graph addConnection: ( nodeB -> nodeC ) label: 'B to C'.	self assert: (graph hasCycle) not.	graph addConnection: ( nodeC -> nodeA ) label: 'C to A creates cycle'.	self assert: (graph hasCycle).		! !!HumGraphTests methodsFor: 'access tests' stamp: 'RichardAlexanderGreen 1/22/2014 17:31'!test140PutGetConnector	"A graph has a collection (set) of nodes"	| graph node node2 |	graph := HumGraph new.	self assert: ( graph nodes isEmpty ).		node := 'My content just happens to be a string but I could be any kind of object'.	graph addNode: node.	self assert: ( graph nodes size = 1 ).		node2 := 'My content also just happens to be a string but I could be any kind of object'.	graph addNode: node2.	self assert: ( graph nodes size = 2 ).		graph addConnection: ( node -> node2 ).	self assert: ( graph connections size = 1 ).! !!HumGraphTests methodsFor: 'access tests' stamp: 'RichardAlexanderGreen 1/22/2014 17:31'!test120GraphHasConnections	"A graph has a collection (set) of nodes"	| graph |	graph := HumGraph new.	self assert: ( graph connections isEmpty ).! !!HumGraphTests methodsFor: 'access tests' stamp: 'RichardAlexanderGreen 1/22/2014 17:31'!test150PutGetLabeledConnections	"A graph has a collection (set) of nodes"	| graph nodeA nodeB |	graph := HumGraph new.	self assert: ( graph nodes isEmpty ).		nodeA := 'My content just happens to be a string but I could be any kind of object'.	graph addNode: nodeA.	self assert: ( graph nodes size = 1 ).		nodeB := 'My content also just happens to be a string but I could be any kind of object'.	graph addNode: nodeB.	self assert: ( graph nodes size = 2 ).		graph addConnection: ( nodeA -> nodeB ) label: 'A to B'.	self assert: ( graph connections size = 1 ).		graph addConnection: ( nodeB -> nodeA ) label: 'B to A'.	self assert: ( graph connections size = 2 ).		graph addConnection: ( nodeA -> nodeB ) label: 'A to B again'.	self assert: ( graph connections size = 3 ).! !Object subclass: #HumGraph	instanceVariableNames: 'connectionLabels nodeLabels'	classVariableNames: ''	poolDictionaries: ''	category: 'Hum-Graph'!!HumGraph commentStamp: 'RichardAlexanderGreen 3/26/2015 10:22' prior: 0!HumGraph is a simple directed graph.Instance Variables:	connectionLabels	<Set>	nodeLabels	<(Collection of: Object)>!!HumGraph methodsFor: 'evaluating' stamp: 'RichardAlexanderGreen 1/19/2015 10:26'!downStreamFrom: aRootNode 	"Collect the nodes that are down-stream from a root node."	| upStream downStream |	"Set up recursive loop."	upStream := Set new.	downStream := self downStreamFrom: aRootNode butNotIn: upStream.	^downStream.	! !!HumGraph methodsFor: 'evaluating' stamp: 'RichardAlexanderGreen 1/19/2015 10:30'!downStreamFrom: aRootNode butNotIn: upStreamNodes 	"Find nodes that are down-stream from the root node but not in the upStreamNodes."	| |	self shouldBeImplemented.	! !!HumGraph methodsFor: 'evaluating' stamp: 'RichardAlexanderGreen 1/19/2015 10:20'!hasCycle	"Does the graph contain at least one cycle?"	| |	nodeLabels		do: [:nodeLabel |			| label rootNode downStream |			label := nodeLabel at: 1.			rootNode := nodeLabel at: 2.			"downStreamFrom: will not extend leafs that match root"			downStream := self downStreamFrom: rootNode.			((downStream leafNodes) include: rootNode) ifTrue: [^true].			].	^false.! !!HumGraph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 9/22/2013 19:36'!addNode: anObject label: aString	"Add the given object to the set of nodes"	" Note that each object / node is unique"	( self nodeLabels ) add: { aString. anObject. }! !!HumGraph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 9/22/2013 19:37'!connections	"Return the connections (associations) in this graph."	| bagConnections |	bagConnections := Bag new.	(self connectionLabels)		do: [ :entry |			"entry looks like {  label. association. }"			bagConnections add: (entry at: 2 ).			].	^bagConnections.! !!HumGraph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 9/22/2013 19:45'!nodes	"Return the nodes in this graph."	| bagNodes |	bagNodes := Bag new.	(self nodeLabels)		do: [ :entry |			"entry looks like {  label. object. }"			bagNodes add: (entry at: 2 ).			].	^bagNodes.! !!HumGraph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 9/22/2013 19:38'!nodeLabels	^nodeLabels ifNil: [ nodeLabels := Set new ].! !!HumGraph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 9/22/2013 19:32'!addConnection: anAssociation 	self addConnection: anAssociation label: 'unknown'.! !!HumGraph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 9/22/2013 19:36'!addConnection: anAssociation label: aString	( self connections ) add: anAssociation.	( self connectionLabels ) add: { aString. anAssociation.  }.! !!HumGraph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 9/22/2013 19:35'!addNode: anObject 	"Add the given object to the set of nodes"	" Note that each object / node is unique"	self addNode: anObject label: 'unknown'.! !!HumGraph methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 9/22/2013 19:18'!connectionLabels	^ connectionLabels ifNil: [ connectionLabels := Set new ].! !